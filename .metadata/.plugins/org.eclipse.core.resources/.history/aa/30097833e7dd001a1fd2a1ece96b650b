package com.rdsq.arivana.web;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import com.rdsq.arivana.business.Armor;
import com.rdsq.arivana.db.ArmorRepository;

@CrossOrigin
@RestController
@RequestMapping("/armor")
public class ArmorController {

	@Autowired
	private ArmorRepository armorRepo;
	
	@GetMapping("/")
	public JsonResponse getAll() {
		try {
			return JsonResponse.getInstance(armorRepo.findAll());
		} catch (Exception e) {
			e.printStackTrace();
			return JsonResponse.getInstance(e);
		}
	}
	
	@GetMapping("/{id}")
	public JsonResponse get(@PathVariable Integer id) {
		if(id==null)return JsonResponse.getInstance("Invalid entry");
		try {
			Optional<Armor> armor = armorRepo.findById(id);
			if(!armor.isPresent()) return JsonResponse.getInstance("No user exists with id " +id+"!");
			return JsonResponse.getInstance(armor.get());
		} catch (Exception e) {
			e.printStackTrace();
			return JsonResponse.getInstance(e);
		}
	}
	
	private JsonResponse save(Armor armor) {
		try {
			Armor a = armorRepo.saveAndFlush(armor);
			return JsonResponse.getInstance(a);
		} catch (IllegalArgumentException ie) {
			ie.printStackTrace();
			return JsonResponse.getInstance(ie);
		} catch (Exception e) {
			e.printStackTrace();
			return JsonResponse.getInstance(e);
		}
	}
	
	@PostMapping("/")
	public JsonResponse addArmor(@RequestBody Armor armor) {
		try {
			Armor a = armorRepo.findByName(armor.getName());
			if(a!=null)return JsonResponse.getInstance("Armor name exists already!");
			return save(armor);
		} catch (Exception e) {
			e.printStackTrace();
			return JsonResponse.getInstance(e);
		}
	}
	
	@PutMapping("/")
	public JsonResponse update(@RequestBody Armor armor) {
		try {
			Optional<Armor> a = armorRepo.findById(armor.getId());
			if(!a.isPresent()) return JsonResponse.getInstance("Armor doesn't exist");
			return save(armor);
		} catch (Exception e) {
			e.printStackTrace();
			return JsonResponse.getInstance(e);
		}
	}
	
	@DeleteMapping("/{id}")
	public JsonResponse deleteArmor(@PathVariable Integer id) {
		if(id==null)return JsonResponse.getInstance("ID field cannot be blank");
		try {
			Optional<Armor> armor = armorRepo.findById(id);
			if(!armor.isPresent()) return JsonResponse.getInstance("No armor with that id can be found");
			armorRepo.deleteById(id);
			return JsonResponse.getInstance(armor.get().getName() + "delete.");
		} catch (Exception e) {
			e.printStackTrace();
			return JsonResponse.getInstance(e);
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
