package com.rdsq.arivana.web;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import com.rdsq.arivana.business.CharSkill;
import com.rdsq.arivana.business.Characters;
import com.rdsq.arivana.db.CharSkillRepository;
import com.rdsq.arivana.db.CharactersRepository;

@CrossOrigin
@RestController
@RequestMapping("/charskill")
public class CharSkillController {
	
	@Autowired
	private CharSkillRepository skillRepo;
	@Autowired
	private CharactersRepository charRepo;
	
	@GetMapping("/{charId}")
	public JsonResponse getByChar(@PathVariable Integer charId) {
		if(charId==null) return JsonResponse.getInstance("ID must be a valid number");
		try {
			Optional<Characters> character = charRepo.findById(charId);
			if(!character.isPresent()) return JsonResponse.getInstance("No such character exists!");
		} catch (Exception e) {
			e.printStackTrace();
			return JsonResponse.getInstance(e);
		}
		try {
			Iterable<CharSkill> charSkills = skillRepo.findByCharactersId(charId);
			if(charSkills == null) return JsonResponse.getInstance("Character has no skills");
			return JsonResponse.getInstance(charSkills);
		} catch (Exception e) {
			e.printStackTrace();
			return JsonResponse.getInstance(e);
		}
	}
	
	private JsonResponse save(CharSkill charSkill) {
		try {
			CharSkill cs = skillRepo.saveAndFlush(charSkill);
			return JsonResponse.getInstance(cs);
		} catch (IllegalArgumentException ie) {
			ie.printStackTrace();
			return JsonResponse.getInstance(ie);
		} catch (Exception e) {
			e.printStackTrace();
			return JsonResponse.getInstance(e);
		}
	}
	
	@PostMapping("/")
	public JsonResponse addCharSkill(@RequestBody CharSkill charSkill) {
		try {
			CharSkill cs = skillRepo.findByCharacterIdAndSkillId(charSkill.getCharacter().getId(), charSkill.getSkill().getId());
			if(cs!=null) return JsonResponse.getInstance("Character already purchased this skill!");
			return save(charSkill);
		} catch (Exception e) {
			e.printStackTrace();
			return JsonResponse.getInstance(e);
		}
	}
	
	@PutMapping("/")
	public JsonResponse update(@RequestBody CharSkill charSkill) {
		try {
			Optional<CharSkill> cs = skillRepo.findById(charSkill.getId());
			if(!cs.isPresent()) return JsonResponse.getInstance("Skill with that ID does not exist in character skills!");
			return save(charSkill);
		} catch (Exception e) {
			e.printStackTrace();
			return JsonResponse.getInstance(e);
		}
	}
	
	@DeleteMapping("/{id}")
	public JsonResponse deleteCharSkill(@PathVariable Integer id) {
		
	}

}












































