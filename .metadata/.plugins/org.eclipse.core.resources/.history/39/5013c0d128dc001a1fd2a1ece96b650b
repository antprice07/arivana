package com.rdsq.arivana.web;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import com.rdsq.arivana.business.CharMiscInventory;
import com.rdsq.arivana.business.Characters;
import com.rdsq.arivana.db.CharMiscInventoryRepository;
import com.rdsq.arivana.db.CharactersRepository;

@CrossOrigin
@RestController
@RequestMapping("/charmiscinv")
public class CharMiscItemController {
	
	@Autowired
	private CharMiscInventoryRepository invRepo;
	@Autowired
	private CharactersRepository charRepo;
	
	@GetMapping("/{charId}")
	public JsonResponse getByChar(@PathVariable Integer charId) {
		if(charId==null) return JsonResponse.getInstance("ID must be a valid number");
		try {
			Optional<Characters> character = charRepo.findById(charId);
			if(!character.isPresent()) return JsonResponse.getInstance("No such character exists!");
		} catch (Exception e) {
			e.printStackTrace();
			return JsonResponse.getInstance(e);
		}
		try {
			Iterable<CharMiscInventory> cmi = invRepo.findByCharactersId(charId);
			if(cmi == null) return JsonResponse.getInstance("Character has no misc inventory items");
			return JsonResponse.getInstance(cmi);
		} catch (Exception e) {
			e.printStackTrace();
			return JsonResponse.getInstance(e);
		}
	}
	
	private JsonResponse save(CharMiscInventory cmi) {
		try {
			CharMiscInventory c = invRepo.saveAndFlush(cmi);
			return JsonResponse.getInstance(c);
		} catch (IllegalArgumentException ie) {
			ie.printStackTrace();
			return JsonResponse.getInstance(ie);
		} catch (Exception e) {
			e.printStackTrace();
			return JsonResponse.getInstance(e);
		}
	}
	
	@PostMapping("/")
	public JsonResponse addMiscItemInv(@RequestBody CharMiscInventory cmi) {
		try {
			CharMiscInventory c = invRepo.findByCharactersIdAndMiscItemId(cmi.getCharacter().getId(), cmi.getMiscItem().getId());
			if(c!=null) {
				cmi.setQuantity(c.getQuantity()+cmi.getQuantity());
				return save(cmi);
			}
			return save(cmi);
		} catch (Exception e) {
			e.printStackTrace();
			return JsonResponse.getInstance(e);
		}
	}
	
	@PutMapping("/")
	public JsonResponse update(@RequestBody CharMiscInventory cmi) {
		try {
			Optional<CharMiscInventory> c = invRepo.findById(cmi.getId());
			if(!c.isPresent()) return JsonResponse.getInstance("No such item exists in inventory");
			return save(cmi);
		} catch (Exception e) {
			e.printStackTrace();
			return JsonResponse.getInstance(e);
		}
	}

}



































